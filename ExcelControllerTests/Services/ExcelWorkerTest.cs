using Moq;
using ExcelController.Services;
using ExcelController.Services.InteropWrappers;
using ExcelController.Interfaces;
using AutoFixture;
using Microsoft.Office.Interop.Excel;

namespace ExcelControllerTests.Services
{
    public class ExcelWorkerTest
    {
        private Mock<IExcelApplication> _mockExcel;
        private Mock<IExcelReader> _mockReader;
        private Mock<IExcelWriter> _mockWriter;
        private Mock<IExcelCleaner> _mockCleaner;
        private Mock<IExcelSearcher> _mockSearcher;
        private ExcelWorker _excelWorker;
        private Fixture _fixture;

        [SetUp]
        public void Setup()
        {
            _mockExcel = new Mock<IExcelApplication>();
            _mockReader = new Mock<IExcelReader>();
            _mockWriter = new Mock<IExcelWriter>();
            _mockCleaner = new Mock<IExcelCleaner>();
            _mockSearcher = new Mock<IExcelSearcher>();
            _fixture = new Fixture();

            _excelWorker = new ExcelWorker(_mockExcel.Object, _mockReader.Object, _mockWriter.Object, _mockCleaner.Object, _mockSearcher.Object);
        }

        [Test]
        [TestCase(1, "Test String", 4, 1, 2, 3)]
        [TestCase(1, "Test String", 4, "Name1", "Name2", "Name3")]

        public void WriteDataInEmptyColumn_ShouldWriteData_WhenColumnIsEmpty(int countCells, string columnName, int startRow, params object[] data)
        {
            // Arrange
            var cells = CreateCells(countCells);
            _mockSearcher.Setup(x => x.GetCellsByValue(It.IsAny<string>(), It.IsAny<IExcelRange>()))
                .Returns(cells);
            _mockReader.Setup(x => x.ReadCell(It.IsAny<int>(), It.IsAny<int>())).Returns((string)null);
            // Act
            _excelWorker.WriteDataInEmptyColumn(data.ToList(), columnName, startRow);

            // Assert
            VerifyWriteCalls(startRow, cells.First().Column, data, Times.Once());
        }

        [Test]
        [TestCase(2, "Test String", 4, 1, 2, 3)]
        public void WriteDataInEmptyColumn_ShouldWriteData_WhenFirstColumnIsFilledButSecondIsEmpty(int countCells, string columnName, int startRow, params object[] data)
        {
            // Arrange
            var cells = CreateCells(countCells);
            _mockSearcher.Setup(x => x.GetCellsByValue(It.IsAny<string>(), It.IsAny<IExcelRange>()))
                .Returns(cells);
            _mockReader.SetupSequence(x => x.ReadCell(It.IsAny<int>(), It.IsAny<int>()))
                .Returns("The Cell is Filled")
                .Returns((string)null);

            // Act
            _excelWorker.WriteDataInEmptyColumn(data.ToList(), columnName, startRow);

            // Assert

            VerifyWriteCalls(startRow, cells.First().Column, data, Times.Never());
            VerifyWriteCalls(startRow, cells.Last().Column, data, Times.Once());
        }

        [Test]
        [TestCase(1, "Test String", 4, 1, 2, 3)]
        [TestCase(1, "Test String", 4, "Name1", "Name2", "Name3")]
        public void WriteDataInEmptyColumn_ShouldNotWriteData_WhenHasNoEmptyColumn(int countCells, string columnName, int startRow, params object[] data)
        {
            // Arrange
            var cells = CreateCells(countCells);
            _mockSearcher.Setup(x => x.GetCellsByValue(It.IsAny<string>(), It.IsAny<IExcelRange>()))
                .Returns(cells);
            _mockReader.Setup(x => x.ReadCell(It.IsAny<int>(), It.IsAny<int>())).Returns("The Cell is Filled");
            // Act
            _excelWorker.WriteDataInEmptyColumn(data.ToList(), columnName, startRow);

            // Assert
            VerifyWriteCalls(startRow, cells.First().Column, data, Times.Never());
        }

        private List<IExcelRange> CreateCells(int count)
        {
            return Enumerable.Range(0, count).Select(_ => CreateCell().Object).ToList();
        }

        private Mock<IExcelRange> CreateCell()
        {
            int autoGeneratedNumber = _fixture.Create<int>();
            var mock = new Mock<IExcelRange>();
            mock.Setup(x => x.Column).Returns(autoGeneratedNumber);
            mock.Setup(x => x.Row).Returns(4);
            return mock;
        }

        private void VerifyWriteCalls(int startRow, int column, object[] data, Times times)
        {
            for (int i = 0; i < data.Length; i++)
            {
                _mockWriter.Verify(x => x.WriteCell(startRow + i, column, data[i].ToString()), times);
            }
        }
    }
}